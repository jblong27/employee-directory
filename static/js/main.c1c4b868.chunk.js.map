{"version":3,"sources":["components/Search/Search.js","utils/API.js","components/DataTable/DataTable.js","components/DataContainer/DataContainer.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","onChange","handleInputChange","value","id","type","name","list","placeholder","onClick","handleSearch","axios","get","TableData","sortByName","results","map","result","key","login","uuid","src","picture","medium","alt","first","last","cell","href","email","Container","state","search","employees","sortedEmployees","order","sorted","filtered","sort","a","b","console","log","setState","event","UserInput","target","filter","employee","toLowerCase","indexOf","employeeSearch","API","then","res","data","catch","err","preventDefault","alert","includes","this","DataTable","Component","App","DataContainer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1c4b868.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles.css\";\r\n\r\nfunction Search(props) {\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <header className=\"z-depth col s12\">\r\n        <div className=\"row\">\r\n          <div className=\"col s6\">\r\n            <h3 className=\"right-align headerText\">Employee Directory</h3>\r\n          </div>\r\n          <div className=\"col s6\">\r\n            <div className=\"col s6 inputAndButton right-align\">\r\n              <input\r\n                onChange={props.handleInputChange}\r\n                value={props.value}\r\n                id=\"employees\"\r\n                type=\"text\"\r\n                name=\"search\"\r\n                list=\"employee\"\r\n                className=\"inputBox\"\r\n                placeholder=\"Search by name\" />\r\n            </div>\r\n            <div className=\"col m4\">\r\n              <button\r\n                type=\"submit\"\r\n                value=\"\"\r\n                className=\"btn z-depth-2 waves-effect searchBtn\"\r\n                onClick={props.handleSearch}>Search</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search","import axios from \"axios\";\r\n\r\nexport default {\r\n  getUsers: function() {\r\n    return axios.get(\"https://randomuser.me/api/?results=20\")\r\n  }\r\n};","import React from \"react\";\r\nimport \"../styles.css\";\r\n\r\nfunction TableData(props) {\r\n  return (\r\n\r\n    <table className=\"tableEmployee \">\r\n      <thead>\r\n        <tr>\r\n          <th></th>\r\n          <th onClick={props.sortByName}>Name</th>\r\n          <th>Phone</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody className=\"\">\r\n        {props.results.map(result => (\r\n          <tr className=\"table\" key={result.login.uuid}>\r\n\r\n              <td><img className=\"\" src={result.picture.medium} alt=\"\" /></td>\r\n              <td>{result.name.first + \" \" + result.name.last}</td>\r\n              <td>{result.cell}</td>\r\n              <td className=\"email\"><a href={result.email}>{result.email}</a></td>\r\n            \r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nexport default TableData","import React, { Component } from \"react\";\r\nimport Search from \"../Search/Search\";\r\nimport API from \"../../utils/API\";\r\nimport DataTable from \"../DataTable/DataTable\";\r\nimport \"../styles.css\";\r\n\r\nclass Container extends Component {\r\n\r\n  state = {\r\n    //setting the component's original state\r\n    search: \"\",\r\n    employees: [],\r\n    sortedEmployees: [],\r\n    order: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n\r\n    API.getUsers().then(res => this.setState({\r\n      employees: res.data.results,\r\n      sortedEmployees: res.data.results\r\n    })).catch(err => console.log(err))\r\n  }\r\n  //show employees by ascending / descending order\r\n  sortByName = () => {\r\n\r\n    const sorted = this.state.sortedEmployees;\r\n\r\n    if (this.state.order === \"asc\") {\r\n      const filtered = sorted.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1);\r\n      console.log(filtered);\r\n\r\n      this.setState({\r\n        sortedEmployees: filtered,\r\n        order: \"desc\"\r\n      })\r\n    } else {\r\n\r\n        const filtered = sorted.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1);\r\n        console.log(filtered);\r\n\r\n        this.setState({\r\n          sortedEmployees: filtered,\r\n          order: \"asc\"\r\n        })\r\n    }\r\n  }\r\n  \r\n  handleInputChange = event => {\r\n\r\n    const employees = this.state.employees;\r\n    const UserInput = event.target.value;\r\n    const sortedEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1)\r\n    this.setState({\r\n      sortedEmployees,\r\n    })\r\n  }\r\n\r\n  employeeSearch = () => {\r\n    API.getUsers()\r\n      .then(res => this.setState({\r\n        sortedEmployees: res.data.results,\r\n        employees: res.data.results\r\n      }))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  handleSearch = event => {\r\n    event.preventDefault();\r\n    if (!this.state.search) {\r\n      alert(\"Enter a name\")\r\n    }\r\n    const { employees, search } = this.state;\r\n\r\n    const sortedEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\r\n\r\n    this.setState({\r\n      sortedEmployees\r\n    })\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      \r\n      <div>\r\n\r\n        <Search\r\n          employee={this.state.employees}\r\n          handleSearch={this.handleSearch}\r\n          handleInputChange={this.handleInputChange} />\r\n        <DataTable results={this.state.sortedEmployees}\r\n          sortByName={this.sortByName} />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Container","import React from 'react';\r\nimport './App.css';\r\nimport DataContainer from \"./components/DataContainer/DataContainer\";\r\n\r\nfunction App() {\r\n  return (\r\n    <DataContainer />\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}